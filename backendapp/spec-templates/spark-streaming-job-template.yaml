apiVersion: "sparkoperator.k8s.io/v1beta2"
kind: SparkApplication
spec:
  sparkConf:
    spark.jars.packages: "org.apache.spark:spark-sql-kafka-0-10_2.12:3.0.0"
    spark.jars.repositories: "https://packages.confluent.io/maven"
    spark.jars.ivy: "/tmp/ivy"
    spark.eventLog.enabled: "true"
    #spark.eventLog.dir: "gs://spark-hs/" # todo, this should be per-organization
    spark.kubernetes.driver.secrets.spark-secret: "/mnt/secrets1" #spark-secret is the Secret name as defined when creating a kubernetes secret, generated from spark-gcs
    spark.kubernetes.executor.secrets.spark-secret: "/mnt/secrets1"
    spark.hadoop.google.cloud.auth.service.account.json.keyfile: "/mnt/secrets1/key.json"
  type: Python
  pythonVersion: "3"
  mode: cluster
  imagePullPolicy: Always
  mainApplicationFile: "local:///opt/spark/work-dir/replay_app.py" # todo, adjust this to be the right entrypoint
  sparkVersion: "3.0.1"
  hadoopConf:
    # "fs.gs.project.id": streamstatetest
    # "fs.gs.system.bucket": "streamstate-sparkstorage-testorg"  # ah, this uses gcs connector...still not sure if I need to directly mount it or if it automatically uses
    "google.cloud.auth.service.account.enable": "true" 
    "google.cloud.auth.service.account.json.keyfile": "/mnt/secrets/key.json"
    "fs.gs.impl": "com.google.cloud.hadoop.fs.gcs.GoogleHadoopFileSystem"
    "fs.AbstractFileSystem.gs.impl": "com.google.cloud.hadoop.fs.gcs.GoogleHadoopFileSystem"
  volumes:
    - name: spark-data
      persistentVolumeClaim:
        claimName: spark-data
  restartPolicy:
    type: Always # should be able to resume from checkpoint if killed for some reason
  driver:
    coreRequest: 200m
    memory: "512m"
    serviceAccount: spark # this maps to spark-gcs 
    volumeMounts:
      - name: spark-data
        mountPath: /mnt/spark/work


    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8090"
    secrets:
    - name: "spark-secret" # Secret name as defined when creating a kubernetes secret, generated from spark-gcs
      path: "/mnt/secrets"
      secretType: GCPServiceAccount
    envFrom:
      - secretRef:
          name: "cassandra-secret" # TODO pass in from cassandra_secret credentials
    env:
      - name: CASSANDRA_LOADBALANCER_SERVICE_HOST # TODO! pass this in as part of json
        value: cluster1-dc1-service # todo!  this could possibly change if multiple cassandra racks/nodes/clusters
      - name: CASSANDRA_LOADBALANCER_SERVICE_PORT
        value: "9042"
  executor:
    instances: 1
    cores: 1
    memory: "512m"
    volumeMounts:
      - name: spark-data
        mountPath: /mnt/spark/work
    secrets:
    - name: "spark-secret" # Secret name as defined when creating a kubernetes secret
      path: "/mnt/secrets"
      secretType: GCPServiceAccount
  monitoring: 
    exposeDriverMetrics: true
    exposeExecutorMetrics: true
    prometheus:
      jmxExporterJar: "/prometheus/jmx_prometheus_javaagent-0.11.0.jar"
      port: 8090

# ---
# apiVersion: storage.k8s.io/v1
# kind: StorageClass
# metadata:
#   name: spark-data # probably need this to be named per-job
# provisioner: kubernetes.io/gce-pd
# volumeBindingMode: WaitForFirstConsumer
# parameters:
#   type: pd-ssd
#   fstype: ext4
#   replication-type: none

# ---
# kind: PersistentVolume
# apiVersion: v1
# metadata:
#   name: spark-data # probably need this to be named per-job
# spec:
#   capacity:
#     storage: 100Mi
#   accessModes:
#     - ReadWriteOnce

# ---
# kind: PersistentVolumeClaim
# apiVersion: v1
# metadata:
#   name: spark-data # probably need this to be named per-job
# spec:
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 100Mi
