apiVersion: "sparkoperator.k8s.io/v1beta2"
kind: SparkApplication
metadata:
  name: replayfromfile
  #namespace: default # todo, adjust per tenant
spec:
  sparkConf:
    spark.jars.packages: "org.apache.spark:spark-sql-kafka-0-10_2.12:3.0.0"
    spark.jars.repositories: "https://packages.confluent.io/maven"
    spark.jars.ivy: "/tmp/ivy"
  type: Scala
  mode: cluster
  image: us-central1-docker.pkg.dev/streamstatetest/testorg/scalaapp:v0.1.0
  imagePullPolicy: Always
  arguments:
    - mytestapp
    - gs://streamstate-sparkstorage-testorg/
    - 2d
    - /tmp/checkpoint # checkpoint, where does this store data? ephemerally? can I directly calls gs:// or do I need to mount gs inside this container?
    - cluster1

  hadoopConf:
    "fs.gs.project.id": streamstatetest
    "fs.gs.system.bucket": "streamstate-sparkstorage-testorg"  # ah, this uses gcs connector...still not sure if I need to directly mount it or if it automatically uses
    "google.cloud.auth.service.account.enable": "true" 
    "google.cloud.auth.service.account.json.keyfile": "/mnt/secrets/key.json"
    "fs.gs.impl": "com.google.cloud.hadoop.fs.gcs.GoogleHadoopFileSystem"
    "fs.AbstractFileSystem.gs.impl": "com.google.cloud.hadoop.fs.gcs.GoogleHadoopFileSystem"
  mainClass: sparkwrappers.ReplayHistoryFromFile
  mainApplicationFile: "local:///opt/spark/work-dir/streamstate.jar"
  sparkVersion: "3.0.1"
  driver:
    coreRequest: 200m
    memory: "512m"
    serviceAccount: spark # this maps to spark-gcs 
    secrets:
    - name: "spark-secret" # Secret name as defined when creating a kubernetes secret, generated from spark-gcs
      path: "/mnt/secrets"
      secretType: GCPServiceAccount
    envFrom:
      - secretRef:
          name: "cassandra-secret" # pass in from cassandra_secret credentials
  executor:
    instances: 1
    cores: 1
    memory: "512m"
    secrets:
    - name: "spark-secret" # Secret name as defined when creating a kubernetes secret
      path: "/mnt/secrets"
      secretType: GCPServiceAccount
  monitoring: ## TODO test this!!  May need to add prometheus operator https://dzlab.github.io/bigdata/2020/07/03/spark3-monitoring-2/
    exposeDriverMetrics: true
    exposeExecutorMetrics: true
    prometheus:
      jmxExporterJar: "/prometheus/jmx_prometheus_javaagent-0.11.0.jar"
      port: 8090