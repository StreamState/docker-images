apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: webhook
spec:
  template:
    serviceAccountName: argo-events-sa # TODO! create own service account with minimum permissions
  dependencies:
    - name: test-dep
      eventSourceName: webhook
      eventName: example
  triggers:
    - template:
        name: webhook-workflow-trigger
        k8s:
          group: argoproj.io
          version: v1alpha1
          resource: workflows
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                generateName: spark-streaming-ci-  # Name of this Workflow
              spec:
                serviceAccountName: argo-events-sa # TODO! create different service account than from line 7 and give minimum permissions
                arguments:
                  parameters:
                    - name: scalacode
                    # value: this will get overridden by test-dep
                entrypoint: main      
                volumeClaimTemplates:
                - metadata:
                    name: work
                  spec:
                    accessModes: [ "ReadWriteOnce" ]
                    resources:
                      requests:
                        storage: 64Mi
                templates:
                - name: main
                  inputs:
                    parameters:
                      - name: scalacode
                  dag:
                    tasks:
                    - name: A
                      template: build-jar
                      arguments:
                        parameters: 
                         - name: scalacode
                           value: "{{inputs.parameters.scalacode}}"
                    - name: B
                      dependencies: [A]
                      template: build-docker-image

                - name: build-jar     
                  inputs:
                    parameters:
                      - name: scalacode
                  container:
                    volumeMounts:
                    - mountPath: /work # hope this persists across containers/steps...
                      name: work
                    image: us.gcr.io/streamstatetest/scalacompile:v0.5.0
                    command: [sh, -c]
                    args: ["echo {{inputs.parameters.scalacode}} | base64 --decode > src/main/scala/custom.scala; sbt assembly; cp streamstate.jar /work/streamstate.jar; ls -la /work;"]
                    #workingDir: /work
                  archiveLocation: # maybe delete this...
                    archiveLogs: false

                - name: build-docker-image
                  inputs:
                    parameters:
                      # Name of the image to push
                      - name: image
                        value: us.gcr.io/streamstatetest/scalaapp:v0.1.0 # TODO!  specify tag version
                      - name: dockerfile 
                        value: RlJPTSB1cy5nY3IuaW8vc3RyZWFtc3RhdGV0ZXN0L3NwYXJrYmFzZTp2MC4xLjAgCkNPUFkgc3RyZWFtc3RhdGUuamFyIC9vcHQvc3Bhcmsvd29yay1kaXIvc3RyZWFtc3RhdGUuamFyCkVOVFJZUE9JTlQgWyIvb3B0L2VudHJ5cG9pbnQuc2giXQ==
                  volumes:
                    - name: docker-config
                      secret:
                        secretName: gcr-secret
                  container:
                    image: docker:19.03.13 # us.gcr.io/streamstatetest/dockerindocker:v0.5.0 
                    command: [sh, -c]
                    workingDir: /work
                    args: ["ls -la /work; cat /.docker/config.json; echo {{inputs.parameters.dockerfile}} | base64 -d > Final.Dockerfile; until docker ps; do sleep 3; done; cd /work && docker build . -f Final.Dockerfile -t {{inputs.parameters.image}} && docker push {{inputs.parameters.image}}; "]
                    volumeMounts:
                    - mountPath: /work # hope this persists across containers/steps...
                      name: work
                    - name: docker-config
                      mountPath: /.docker
                    env:
                    - name: DOCKER_HOST
                      value: 127.0.0.1 # or tcp://localhost:2375 ?
                    - name: DOCKER_CONFIG
                      value: /.docker
                  sidecars:
                  - name: dind
                    image: docker:19.03.13-dind
                    env:
                      - name: DOCKER_TLS_CERTDIR
                        value: ""
                    securityContext:
                      privileged: true
                    # mirrorVolumeMounts will mount the same volumes specified in the main container
                    # to the sidecar (including artifacts), at the same mountPaths. This enables
                    # dind daemon to (partially) see the same filesystem as the main container in
                    # order to use features such as docker volume binding.
                    mirrorVolumeMounts: true
          parameters:
            - src:
                dependencyName: test-dep
                dataKey: body.code # scala code to write to custom.scala (for now)
              dest: spec.arguments.parameters.0.value
#---
#apiVersion: v1
#kind: ConfigMap
#metadata:
    # if you want to use this config map by default - name it "artifact-repositories" 
#  name: artifact-repositories
#  annotations:
    # v3.0 and after - if you want to use a specific key, put that's key into this annotation 
#    workflows.argoproj.io/default-artifact-repository: default-v1
#data:
#  default-v1: |
#    gcs:
#      bucket: streamstatetest 
#      key: jars
      # remove this once in GKE
#      serviceAccountKeySecret:
#        name: artifact-secret-for-local-argo
#        key: serviceAccountKey