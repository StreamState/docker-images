apiVersion: argoproj.io/v1alpha1
kind: EventBus
metadata:
  name: default
spec:
  nats:
    native:
      # Optional, defaults to 3. If it is < 3, set it to 3, that is the minimal requirement.
      replicas: 3
      # Optional, authen strategy, "none" or "token", defaults to "none"
      auth: token
#      containerTemplate:
#        resources:
#          requests:
#            cpu: "10m"
#      metricsContainerTemplate:
#        resources:
#          requests:
#            cpu: "10m"
#      antiAffinity: false
#      persistence:
#        storageClassName: standard
#        accessMode: ReadWriteOnce
#        volumeSize: 10Gi

---
apiVersion: argoproj.io/v1alpha1
kind: EventSource
metadata:
  name: streamstatewebservice
  labels:
    eventsource: streamstate
spec:
  replicas: 3 # needed for HA
  webhook:
    # event-source can run multiple HTTP servers. Simply define a unique port to start a new HTTP server
    runcontainer:
      # port to run HTTP server on
      port: "12000"
      # endpoint to listen to
      endpoint: /build/container
      # HTTP request method to allow. In this case, only POST requests are accepted
      method: POST

---
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: argowebhook
  namespace: argo-events
spec:
  healthCheck:
    checkIntervalSec: 15
    port: 12000
    type: HTTP
    requestPath: /health
  #iap:
  #  enabled: true
  #  oauthclientCredentials:
  #    secretName: iap-oauth-client-id
---
apiVersion: v1
kind: Service
metadata:
  name: argowebhook
  annotations:
    # https://cloud.google.com/kubernetes-engine/docs/how-to/ingress-features#1.16-gke.3+
    cloud.google.com/backend-config: '{"default": "argowebhook"}'
  labels:
    service: argowebhook
spec:
  type: NodePort
  ports:
  - port: 12000
    protocol: TCP
  selector:
    controller: eventsource-controller
    eventsource-name: streamstatewebservice


