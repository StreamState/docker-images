apiVersion: networking.k8s.io/v1 #beta1 # extensions/v1beta1
kind: Ingress
metadata:
  name: streamstateingress
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-signin: https://$host/oauth2/start?rd=$escaped_request_uri
    nginx.ingress.kubernetes.io/auth-url: https://$host/oauth2/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      auth_request_set $name_upstream_1 $upstream_cookie__oauth2_proxy_1;
      access_by_lua_block {
        if ngx.var.name_upstream_1 ~= "" then
          ngx.header["Set-Cookie"] = "_oauth2_proxy_1=" .. ngx.var.name_upstream_1 .. ngx.var.auth_cookie:match("(; .*)")
        end
      }
    cert-manager.io/issuer: "letsencrypt-staging" # "letsencrypt-staging"
    acme.cert-manager.io/http01-edit-in-place: "true"
  labels:
    app: streamstateingress
spec:
  tls: # < placing a host in the TLS config will indicate a certificate should be created
  - hosts:
    - ${organization}.streamstate.org
    secretName: streamstate-internal-cert # < cert-manager will store the created certificate in this secret
  rules:
    - host: ${organization}.streamstate.org
      http:
        paths:
        - path: /ui(/|$)(.*)
          pathType: Prefix
          backend:
            service:
              name: argo-server
              port: 
                number: 2746
            #serviceName: argo-server
            #servicePort: 2746
        - path: /build(/|$)(.*) # not protected by oauth2, see oauth2.yml
          pathType: Prefix
          backend:
            service:
              name: argowebhook
              port: 
                number: 12000
            #serviceName: argowebhook
            #servicePort: 12000
        - path: /monitoring(/|$)(.*) 
          pathType: Prefix
          backend:
            service:
              name: prometheus-server 
              port: 
                number: 80
            #serviceName: prometheus-server 
            #servicePort: 80
        - path: /grafana(/|$)(.*)
          pathType: Prefix
          backend:
            service:
              name: grafana
              port: 
                number: 3000
            #serviceName: grafana
            #servicePort: 3000 
        - path: /*
          pathType: Prefix
          backend:
            service:
              name: mainui
              port: 
                number: 80
        #- path: /rotate
        #  pathType: Prefix
        #  backend:
        #    service:
        #      name: mainui
        #      port: 
        #        number: 80
            #serviceName: mainui 
            #servicePort: 80
---

apiVersion: networking.k8s.io/v1 #beta1 # extensions/v1beta1
kind: Ingress
metadata:
  name: oauth2-proxy
  annotations:
    kubernetes.io/ingress.class: nginx 
    acme.cert-manager.io/http01-edit-in-place: "true"
    # no need to annotate with cert-manager.io/issuer: "letsencrypt-prod"
    # since the secret is already generated.  Just re-use the secret
  labels:
    app: oauth2-proxy
spec:
  tls: # < placing a host in the TLS config will indicate a certificate should be created
  - hosts:
    - ${organization}.streamstate.org
    secretName: streamstate-internal-cert # < already generated
  rules:
    - host: ${organization}.streamstate.org
      http:
        paths:
        - path: /oauth2
          pathType: Prefix
          backend:
            service:
              name: oauth2-reverse-proxy
              port:
                number: 4180
        